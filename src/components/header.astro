---
import { Button } from "@components/starwind/button";
import { Dropdown, DropdownTrigger, DropdownContent, DropdownItem, DropdownLabel, DropdownSeparator } from "@components/starwind/dropdown";
import { Dialog, DialogTrigger, DialogContent, DialogClose } from "@components/starwind/dialog";
import { Avatar } from "@components/starwind/avatar";
import { Icon } from "astro-icon/components";

const { lang, site, pageContext } = Astro.locals;
const { menuCategories, i18nMap } = site;

interface LinkItem { text: string; href: string; description?: string; iconName?: string; }
interface MenuItem { text: string; iconName: string; dropdown?: { type: "simple" | "mega"; content: Array<{ label?: string; description?: string; items: LinkItem[]; }>; }; active?: boolean; href?: string; }

function getLocalizedUrl(targetLang: 'fr' | 'en' | 'es') {
    if (!pageContext) {
        const currentPathSegments = Astro.url.pathname.split('/').filter(Boolean);
        if (currentPathSegments[0] === lang) {
            currentPathSegments.shift();
        }
        const pathWithoutLang = currentPathSegments.join('/') || '';
        return `/${targetLang}${pathWithoutLang ? '/' + pathWithoutLang : ''}`;
    }
    
    if (pageContext.type === 'category') {
        const currentCategory = menuCategories.find(c => c.id === pageContext.entityId);
        if (currentCategory) {
            const targetCategoryTranslation = currentCategory.category_translations.find(t => t.lang_code === targetLang);
            const targetCategorySlug = targetCategoryTranslation?.seo_slug || currentCategory.slug;

            if (pageContext.categoryType === 'magazine-index') {
                 return `/${targetLang}/${targetCategorySlug}`;
            } else if (pageContext.parentCategoryId) {
                const parentCategory = menuCategories.find(c => c.id === pageContext.parentCategoryId);
                if (parentCategory) {
                    const targetParentTranslation = parentCategory.category_translations.find(t => t.lang_code === targetLang);
                    const targetParentSlug = targetParentTranslation?.seo_slug || parentCategory.slug;
                    return `/${targetLang}/${targetParentSlug}/${targetCategorySlug}`;
                }
            }
        }
        return `/${targetLang}/`;
    }
    
    if (pageContext.type === 'article') {
        const articleId = pageContext.entityId;
        const categoryId = pageContext.categoryId;

        const targetArticleSlug = i18nMap.articles[articleId]?.[targetLang];
        const targetCategorySlug = i18nMap.categories[categoryId]?.[targetLang];
        
        const articleCategory = menuCategories.find(c => c.id === categoryId);
        if (articleCategory && articleCategory.parent_id) {
            const parentOfCategory = menuCategories.find(c => c.id === articleCategory.parent_id);
            if (parentOfCategory) {
                const targetParentSlug = i18nMap.categories[parentOfCategory.id]?.[targetLang];
                if (targetParentSlug && targetCategorySlug && targetArticleSlug) {
                    return `/${targetLang}/${targetParentSlug}/${targetCategorySlug}/${targetArticleSlug}`;
                }
            }
        }
        if (targetCategorySlug && targetArticleSlug) return `/${targetLang}/magazine/${targetCategorySlug}/${targetArticleSlug}`;
        return `/${targetLang}/`;
    }

    if (pageContext.type === 'author') {
        const authorSlug = i18nMap.authors[pageContext.entityId]?.[targetLang];
        return authorSlug ? `/${targetLang}/auteurs/${authorSlug}` : `/${targetLang}/`;
    }
    
    const path = Astro.url.pathname.split('/').slice(1).join('/');
    return `/${targetLang}${path ? '/' + path : ''}`;
}

const getTranslation = (category: any) => category.category_translations.find((t: any) => t.lang_code === lang);

const menuItems: MenuItem[] = menuCategories
    .filter(cat => cat.parent_id === null && getTranslation(cat))
    .map(parentCat => {
        const parentTranslation = getTranslation(parentCat);
        if (!parentTranslation) return null;

        let dropdownContent: Array<{ label?: string; description?: string; items: LinkItem[]; }> = [];
        let dropdownType: "simple" | "mega" = "simple";
        const directSubCategories = menuCategories.filter(cat => cat.parent_id === parentCat.id && getTranslation(cat)).sort((a, b) => a.display_order - b.display_order);
        
        const isMegaMenu = directSubCategories.some(sub => menuCategories.some(nestedSub => nestedSub.parent_id === sub.id));

        const parentUrlSegment = parentTranslation.seo_slug || parentCat.slug;
        const parentHref = `/${lang}/${parentUrlSegment}`;

        if (isMegaMenu) {
            dropdownType = "mega";
            directSubCategories.forEach(groupOrLinkCat => {
                const groupOrLinkTranslation = getTranslation(groupOrLinkCat);
                if (groupOrLinkTranslation) {
                    const groupUrlSegment = groupOrLinkTranslation.seo_slug || groupOrLinkCat.slug;
                    const finalItems: LinkItem[] = menuCategories
                        .filter(finalCat => finalCat.parent_id === groupOrLinkCat.id && getTranslation(finalCat))
                        .sort((a, b) => a.display_order - b.display_order)
                        .map(finalCat => {
                            const finalTranslation = getTranslation(finalCat);
                            const finalUrlSegment = finalTranslation.seo_slug || finalCat.slug;
                            return { text: finalTranslation.name, href: `/${lang}/${parentUrlSegment}/${groupUrlSegment}/${finalUrlSegment}`, iconName: finalCat.icon_name };
                        });
                    
                    if (finalItems.length > 0) {
                        dropdownContent.push({ label: groupOrLinkTranslation.name, items: finalItems });
                    } else {
                        dropdownContent.push({ items: [{ text: groupOrLinkTranslation.name, href: `/${lang}/${parentUrlSegment}/${groupUrlSegment}`, description: groupOrLinkTranslation.description, iconName: groupOrLinkCat.icon_name }] });
                    }
                }
            });
        } else {
            const simpleItems: LinkItem[] = directSubCategories
                .sort((a, b) => a.display_order - b.display_order)
                .map(subCat => {
                    const subTranslation = getTranslation(subCat);
                    const subUrlSegment = subTranslation.seo_slug || subCat.slug;
                    return { text: subTranslation.name, href: `/${lang}/${parentUrlSegment}/${subUrlSegment}`, iconName: subCat.icon_name };
                });
            if (simpleItems.length > 0) {
                dropdownContent.push({ items: simpleItems });
            }
        }

        return { 
            text: parentTranslation.name, 
            iconName: parentCat.icon_name, 
            dropdown: dropdownContent.length > 0 ? { type: dropdownType, content: dropdownContent } : undefined,
            active: Astro.url.pathname.startsWith(`/${lang}/${parentUrlSegment}`),
            href: parentHref
        };
    })
    .filter(item => item !== null) as MenuItem[];

const availableLangs = [{ code: 'fr', name: 'Français', flag: 'fr' },{ code: 'en', name: 'English', flag: 'gb' },{ code: 'es', name: 'Español', flag: 'es' }];
const isUserLoggedIn = true; const userName = "Jane Doe"; const userEmail = "jane.doe@example.com"; const userAvatarSrc = "https://i.pravatar.cc/150?img=3";
---
<header class="bg-white border-b border-gray-200 px-6 py-4 flex items-center justify-between text-gray-700">
    <div class="flex items-center space-x-2">
        <a href={`/${lang}/`} class="text-blue-600 text-lg font-bold">Annecy</a>
        <span class="text-gray-800 text-lg font-bold">Communautaire</span>
    </div>

    <nav class="hidden md:flex items-center space-x-6">
        {menuItems.map((item) => (
            // Utilise Dropdown si l'item a un dropdown, sinon un simple lien <a>
            <> {/* Fragment pour envelopper la logique conditionnelle */}
            {item.dropdown ? (
                <Dropdown openOnHover>
                    <DropdownTrigger asChild>
                        {/* Le bouton entier est le déclencheur. Le lien est à l'intérieur. */}
                        <button class:list={[
                            "font-medium flex items-center px-2 py-1 rounded group relative",
                            item.active ? "text-blue-600 border-b-2 border-blue-600" : "hover:text-blue-600 hover:border-b-2 hover:border-transparent"
                        ]}>
                            {/* Le lien sur le texte et l'icône */}
                            <a href={item.href} class="flex items-center" tabindex="-1"> {/* tabindex="-1" pour éviter que ce lien soit focus par tab si le bouton parent est déjà focusable */}
                                <Icon name={item.iconName} class="h-4 w-4 mr-1 text-gray-500 group-hover:text-blue-600" />
                                <span>{item.text}</span>
                            </a>
                            {/* La flèche du dropdown - C'est cette zone qui ouvre le dropdown au hover/clic */}
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1 text-gray-500 group-hover:text-blue-600 transition-transform duration-200 group-data-[state=open]:rotate-180" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7" />
                            </svg>
                        </button>
                    </DropdownTrigger>
                    {item.dropdown.type === "mega" ? (
                        <DropdownContent side="bottom" align="start" class:list={["p-6 bg-white rounded-lg shadow-xl border border-gray-100 mt-2 min-w-[500px] lg:min-w-[700px]"]}>
                            <div class:list={["grid gap-x-12 gap-y-4", item.text === "Activités" ? "grid-cols-3" : "grid-cols-2"]}>
                                {item.dropdown.content.map((section) => (
                                    <div>
                                        {section.label && (
                                            <DropdownLabel class="text-gray-700 font-semibold mb-2">{section.label}</DropdownLabel>
                                        )}
                                        <ul class="space-y-1">
                                            {section.items.map((link) => (
                                                <li>
                                                    <a href={link.href} class="group flex items-center text-gray-600 hover:text-blue-600 transition-colors">
                                                        {link.iconName && (<Icon name={link.iconName} class="h-4 w-4 mr-2 text-gray-500 group-hover:text-blue-600" />)}
                                                        {link.text}
                                                    </a>
                                                </li>
                                            ))}
                                        </ul>
                                    </div>
                                ))}
                            </div>
                        </DropdownContent>
                    ) : (
                        <DropdownContent side="bottom" align="start" class="w-56 p-2 rounded-lg shadow-lg bg-white mt-2">
                            {item.dropdown.content[0]?.items.map((link) => (
                                <DropdownItem as="a" href={link.href} class="flex items-center w-full text-left px-3 py-2 text-gray-800 hover:bg-gray-50 hover:text-blue-600 rounded-md">
                                    {link.iconName && (<Icon name={link.iconName} class="h-4 w-4 mr-2 text-gray-500 group-hover:text-blue-600" />)}
                                    {link.text}
                                </DropdownItem>
                            ))}
                        </DropdownContent>
                    )}
                </Dropdown>
            ) : (
                // Si pas de dropdown, c'est un simple lien pour la catégorie parente
                <a href={item.href} class:list={[
                    "font-medium flex items-center px-2 py-1 rounded group relative",
                    item.active ? "text-blue-600 border-b-2 border-blue-600" : "hover:text-blue-600 hover:border-b-2 hover:border-transparent"
                ]}>
                    <Icon name={item.iconName} class="h-4 w-4 mr-1 text-gray-500 group-hover:text-blue-600" />
                    <span>{item.text}</span>
                </a>
            )}
            </>
        ))}
    </nav>

    <div class="hidden md:flex items-center space-x-4">
        <Dropdown>
            <DropdownTrigger asChild>
                <Button variant="ghost" size="icon" aria-label="Changer de langue">
                    <Icon name={`circle-flags:${availableLangs.find(l => l.code === lang)?.flag}`} class="h-6 w-6" />
                </Button>
            </DropdownTrigger>
            <DropdownContent side="bottom" align="end" class="w-40 p-2">
                <DropdownLabel>Choisir une langue</DropdownLabel>
                <DropdownSeparator/>
                {availableLangs.map(target => (
                    <DropdownItem as="a" href={getLocalizedUrl(target.code)} class="flex items-center justify-between">
                        <span>{target.name}</span>
                        <Icon name={`circle-flags:${target.flag}`} class="h-5 w-5" />
                    </DropdownItem>
                ))}
            </DropdownContent>
        </Dropdown>

        {isUserLoggedIn ? (
            <Dropdown>
                <DropdownTrigger asChild>
                    <button class="relative flex items-center space-x-2 rounded-full p-1 -m-1 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors">
                        <Avatar initials={userName.split(' ').map(n => n[0]).join('')} src={userAvatarSrc} alt={userName} class="h-8 w-8" />
                        <span class="text-gray-700 font-medium hidden lg:inline">{userName}</span>
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-gray-500 transition-transform duration-200 group-data-[state=open]:rotate-180" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7" />
                        </svg>
                    </button>
                </DropdownTrigger>
                <DropdownContent side="bottom" align="end" class="w-64 p-2">
                    <div class="px-3 py-2">
                        <p class="font-semibold text-gray-800 truncate">{userName}</p>
                        <p class="text-sm text-gray-500 truncate">{userEmail}</p>
                    </div>
                    <DropdownSeparator class="my-2" />
                    <DropdownItem as="a" href={`/${lang}/profile`} class="flex items-center w-full text-left px-3 py-2 text-gray-800 hover:bg-gray-50 hover:text-blue-600 rounded-md">
                        <Icon name="openmoji:person" class="h-4 w-4 mr-2 text-gray-500" />Mon Profil
                    </DropdownItem>
                    <DropdownItem as="a" href={`/${lang}/settings`} class="flex items-center w-full text-left px-3 py-2 text-gray-800 hover:bg-gray-50 hover:text-blue-600 rounded-md">
                        <Icon name="openmoji:gear" class="h-4 w-4 mr-2 text-gray-500" />Paramètres
                    </DropdownItem>
                    <DropdownSeparator class="my-2" />
                    <DropdownItem as="button" class="flex items-center w-full text-left px-3 py-2 text-gray-800 hover:bg-gray-50 hover:text-red-500 rounded-md">
                        <Icon name="openmoji:door" class="h-4 w-4 mr-2 text-gray-500" />Déconnexion
                    </DropdownItem>
                </DropdownContent>
            </Dropdown>
        ) : (
            <>
                <Button variant="outline" size="sm" as="a" href={`/${lang}/login`}>Connexion</Button>
                <Button size="sm" as="a" href={`/${lang}/register`}>Inscription</Button>
            </>
        )}
    </div>

    <Dialog>
        <DialogTrigger asChild>
            <button aria-label="Ouvrir le menu mobile" class="md:hidden p-2 rounded hover:bg-gray-100">
                <svg class="h-6 w-6 text-gray-700" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M4 6h16M4 12h16M4 18h16" />
                </svg>
            </button>
        </DialogTrigger>
        <DialogContent class="fixed inset-0 bg-white p-6 overflow-auto z-50">
            <div class="flex justify-between items-center mb-6">
                <div class="flex items-center space-x-2">
                    <a href={`/${lang}/`} class="text-blue-600 text-lg font-bold">Annecy</a>
                    <span class="text-gray-800 text-lg font-bold">Communautaire</span>
                </div>
                <DialogClose asChild>
                    <button class="p-2 rounded hover:bg-gray-100" aria-label="Fermer le menu mobile">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-800" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </DialogClose>
            </div>
            
            <div class="mb-6 border-b border-gray-100 pb-4">
                {isUserLoggedIn ? (
                    <div class="flex items-center space-x-3">
                        <Avatar initials={userName.split(' ').map(n => n[0]).join('')} src={userAvatarSrc} alt={userName} class="h-10 w-10" />
                        <div>
                            <p class="font-semibold text-gray-800">{userName}</p>
                            <p class="text-sm text-gray-500">{userEmail}</p>
                        </div>
                    </div>
                ) : (
                    <div class="flex flex-col space-y-3">
                        <Button variant="outline" as="a" href={`/${lang}/login`}>Connexion</Button>
                        <Button as="a" href={`/${lang}/register`}>Inscription</Button>
                    </div>
                )}
            </div>

            <nav class="space-y-4">
                {menuItems.map((item) => (
                    <details class="group border-b border-gray-100 pb-2">
                        <summary class="flex items-center justify-between w-full font-medium text-gray-800 hover:text-blue-600 py-2 cursor-pointer">
                            <div class="flex items-center space-x-2">
                                <Icon name={item.iconName} class="h-5 w-5 text-gray-500" />
                                {/* Lien direct pour l'élément de menu parent mobile */}
                                <a href={item.href} class="text-lg block w-full">{item.text}</a>
                            </div>
                            {/* La flèche et le mécanisme d'ouverture/fermeture du dropdown seulement si un dropdown existe */}
                            {item.dropdown && (
                                <svg class="h-5 w-5 text-gray-500 transform transition-transform duration-200 group-open:rotate-180" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7" />
                                </svg>
                            )}
                        </summary>
                        {item.dropdown && ( // Affiche le contenu du dropdown seulement si un dropdown existe
                            <div class="pl-8 pt-2 pb-2">
                                {item.dropdown.type === "mega" ? (
                                    <>
                                        {item.dropdown.content.map((section) => (
                                            <div class="mt-4 first:mt-0">
                                                {section.label && <p class="font-semibold mb-1 text-gray-600">{section.label}</p>}
                                                <ul class="space-y-1 ml-2">
                                                    {section.items.map((link) => (
                                                        <li>
                                                            <a href={link.href} class="flex items-center text-gray-700 hover:text-blue-600 py-1">
                                                                {link.iconName && (<Icon name={link.iconName} class="h-4 w-4 mr-2 text-gray-500" />)}
                                                                {link.text}
                                                            </a>
                                                        </li>
                                                    ))}
                                                </ul>
                                            </div>
                                        ))}
                                    </>
                                ) : (
                                    <ul class="space-y-1 ml-2">
                                        {item.dropdown.content[0]?.items.map((link) => (
                                            <li>
                                                <a href={link.href} class="flex items-center text-gray-700 hover:text-blue-600 py-1">
                                                    {link.iconName && (<Icon name={link.iconName} class="h-4 w-4 mr-2 text-gray-500" />)}
                                                    {link.text}
                                                </a>
                                            </li>
                                        ))}
                                    </ul>
                                )}
                            </div>
                        )}
                    </details>
                ))}
            </nav>
            {isUserLoggedIn && (
                <details class="group border-b border-gray-100 pb-2 mt-4">
                    <summary class="flex items-center justify-between w-full font-medium text-gray-800 hover:text-blue-600 py-2 cursor-pointer">
                        <div class="flex items-center space-x-2">
                            <Icon name="openmoji:person" class="h-5 w-5 text-gray-500" />
                            <span class="text-lg">Compte</span>
                        </div>
                        <svg class="h-5 w-5 text-gray-500 transform transition-transform duration-200 group-open:rotate-180" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7" />
                        </svg>
                    </summary>
                    <div class="pl-8 pt-2 pb-2 space-y-1 ml-2">
                        <a href={`/${lang}/profile`} class="flex items-center text-gray-700 hover:text-blue-600 py-1"><Icon name="openmoji:person" class="h-4 w-4 mr-2 text-gray-500" />Mon Profil</a>
                        <a href={`/${lang}/settings`} class="flex items-center text-gray-700 hover:text-blue-600 py-1"><Icon name="openmoji:gear" class="h-4 w-4 mr-2 text-gray-500" />Paramètres</a>
                        <div class="border-t border-gray-100 my-2"></div>
                        <button class="flex items-center w-full text-left text-gray-700 hover:text-red-500 py-1"><Icon name="openmoji:door" class="h-4 w-4 mr-2 text-gray-500" />Déconnexion</button>
                    </div>
                </details>
            )}
        </DialogContent>
    </Dialog>
</header>